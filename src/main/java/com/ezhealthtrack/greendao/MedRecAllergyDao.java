package com.ezhealthtrack.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ezhealthtrack.greendao.MedRecAllergy;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MED_REC_ALLERGY.
*/
public class MedRecAllergyDao extends AbstractDao<MedRecAllergy, Long> {

    public static final String TABLENAME = "MED_REC_ALLERGY";

    /**
     * Properties of entity MedRecAllergy.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pat_id = new Property(1, String.class, "pat_id", false, "PAT_ID");
        public final static Property Pat_detail = new Property(2, String.class, "pat_detail", false, "PAT_DETAIL");
        public final static Property Pat_unique_id = new Property(3, String.class, "pat_unique_id", false, "PAT_UNIQUE_ID");
        public final static Property Last_visit = new Property(4, String.class, "last_visit", false, "LAST_VISIT");
    };


    public MedRecAllergyDao(DaoConfig config) {
        super(config);
    }
    
    public MedRecAllergyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MED_REC_ALLERGY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PAT_ID' TEXT," + // 1: pat_id
                "'PAT_DETAIL' TEXT," + // 2: pat_detail
                "'PAT_UNIQUE_ID' TEXT," + // 3: pat_unique_id
                "'LAST_VISIT' TEXT);"); // 4: last_visit
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MED_REC_ALLERGY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MedRecAllergy entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pat_id = entity.getPat_id();
        if (pat_id != null) {
            stmt.bindString(2, pat_id);
        }
 
        String pat_detail = entity.getPat_detail();
        if (pat_detail != null) {
            stmt.bindString(3, pat_detail);
        }
 
        String pat_unique_id = entity.getPat_unique_id();
        if (pat_unique_id != null) {
            stmt.bindString(4, pat_unique_id);
        }
 
        String last_visit = entity.getLast_visit();
        if (last_visit != null) {
            stmt.bindString(5, last_visit);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MedRecAllergy readEntity(Cursor cursor, int offset) {
        MedRecAllergy entity = new MedRecAllergy( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pat_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pat_detail
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pat_unique_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // last_visit
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MedRecAllergy entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPat_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPat_detail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPat_unique_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLast_visit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MedRecAllergy entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MedRecAllergy entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
