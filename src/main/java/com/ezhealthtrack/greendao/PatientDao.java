package com.ezhealthtrack.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ezhealthtrack.greendao.Patient;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PATIENT.
*/
public class PatientDao extends AbstractDao<Patient, Long> {

    public static final String TABLENAME = "PATIENT";

    /**
     * Properties of entity Patient.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pid = new Property(1, String.class, "pid", false, "PID");
        public final static Property Pfn = new Property(2, String.class, "pfn", false, "PFN");
        public final static Property Pmn = new Property(3, String.class, "pmn", false, "PMN");
        public final static Property Pln = new Property(4, String.class, "pln", false, "PLN");
        public final static Property Pmobnum = new Property(5, String.class, "pmobnum", false, "PMOBNUM");
        public final static Property Pemail = new Property(6, String.class, "pemail", false, "PEMAIL");
        public final static Property Pusername = new Property(7, String.class, "pusername", false, "PUSERNAME");
        public final static Property Fid = new Property(8, String.class, "fid", false, "FID");
        public final static Property Padd1 = new Property(9, String.class, "padd1", false, "PADD1");
        public final static Property Padd2 = new Property(10, String.class, "padd2", false, "PADD2");
        public final static Property Pgender = new Property(11, String.class, "pgender", false, "PGENDER");
        public final static Property Pzip = new Property(12, String.class, "pzip", false, "PZIP");
        public final static Property Pcountry = new Property(13, String.class, "pcountry", false, "PCOUNTRY");
        public final static Property Pstate = new Property(14, String.class, "pstate", false, "PSTATE");
        public final static Property Pcity = new Property(15, String.class, "pcity", false, "PCITY");
        public final static Property Parea = new Property(16, String.class, "parea", false, "PAREA");
        public final static Property Pcountryid = new Property(17, String.class, "pcountryid", false, "PCOUNTRYID");
        public final static Property Pstateid = new Property(18, String.class, "pstateid", false, "PSTATEID");
        public final static Property Pcityid = new Property(19, String.class, "pcityid", false, "PCITYID");
        public final static Property Pareaid = new Property(20, String.class, "pareaid", false, "PAREAID");
        public final static Property Uid = new Property(21, String.class, "uid", false, "UID");
        public final static Property Uid_type = new Property(22, String.class, "uid_type", false, "UID_TYPE");
        public final static Property Pdob = new Property(23, String.class, "pdob", false, "PDOB");
        public final static Property Pphoto = new Property(24, String.class, "pphoto", false, "PPHOTO");
        public final static Property Page = new Property(25, String.class, "page", false, "PAGE");
        public final static Property Prelation = new Property(26, String.class, "prelation", false, "PRELATION");
        public final static Property Reg_date = new Property(27, String.class, "reg_date", false, "REG_DATE");
        public final static Property Lastvisit = new Property(28, java.util.Date.class, "lastvisit", false, "LASTVISIT");
        public final static Property P_detail = new Property(29, String.class, "p_detail", false, "P_DETAIL");
        public final static Property Haircolor = new Property(30, String.class, "haircolor", false, "HAIRCOLOR");
        public final static Property Eyecolor = new Property(31, String.class, "eyecolor", false, "EYECOLOR");
        public final static Property Visiblemark = new Property(32, String.class, "visiblemark", false, "VISIBLEMARK");
        public final static Property Height = new Property(33, String.class, "height", false, "HEIGHT");
        public final static Property Display_id = new Property(34, String.class, "display_id", false, "DISPLAY_ID");
    };


    public PatientDao(DaoConfig config) {
        super(config);
    }
    
    public PatientDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PATIENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PID' TEXT," + // 1: pid
                "'PFN' TEXT," + // 2: pfn
                "'PMN' TEXT," + // 3: pmn
                "'PLN' TEXT," + // 4: pln
                "'PMOBNUM' TEXT," + // 5: pmobnum
                "'PEMAIL' TEXT," + // 6: pemail
                "'PUSERNAME' TEXT," + // 7: pusername
                "'FID' TEXT," + // 8: fid
                "'PADD1' TEXT," + // 9: padd1
                "'PADD2' TEXT," + // 10: padd2
                "'PGENDER' TEXT," + // 11: pgender
                "'PZIP' TEXT," + // 12: pzip
                "'PCOUNTRY' TEXT," + // 13: pcountry
                "'PSTATE' TEXT," + // 14: pstate
                "'PCITY' TEXT," + // 15: pcity
                "'PAREA' TEXT," + // 16: parea
                "'PCOUNTRYID' TEXT," + // 17: pcountryid
                "'PSTATEID' TEXT," + // 18: pstateid
                "'PCITYID' TEXT," + // 19: pcityid
                "'PAREAID' TEXT," + // 20: pareaid
                "'UID' TEXT," + // 21: uid
                "'UID_TYPE' TEXT," + // 22: uid_type
                "'PDOB' TEXT," + // 23: pdob
                "'PPHOTO' TEXT," + // 24: pphoto
                "'PAGE' TEXT," + // 25: page
                "'PRELATION' TEXT," + // 26: prelation
                "'REG_DATE' TEXT," + // 27: reg_date
                "'LASTVISIT' INTEGER," + // 28: lastvisit
                "'P_DETAIL' TEXT," + // 29: p_detail
                "'HAIRCOLOR' TEXT," + // 30: haircolor
                "'EYECOLOR' TEXT," + // 31: eyecolor
                "'VISIBLEMARK' TEXT," + // 32: visiblemark
                "'HEIGHT' TEXT," + // 33: height
                "'DISPLAY_ID' TEXT);"); // 34: display_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PATIENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Patient entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(2, pid);
        }
 
        String pfn = entity.getPfn();
        if (pfn != null) {
            stmt.bindString(3, pfn);
        }
 
        String pmn = entity.getPmn();
        if (pmn != null) {
            stmt.bindString(4, pmn);
        }
 
        String pln = entity.getPln();
        if (pln != null) {
            stmt.bindString(5, pln);
        }
 
        String pmobnum = entity.getPmobnum();
        if (pmobnum != null) {
            stmt.bindString(6, pmobnum);
        }
 
        String pemail = entity.getPemail();
        if (pemail != null) {
            stmt.bindString(7, pemail);
        }
 
        String pusername = entity.getPusername();
        if (pusername != null) {
            stmt.bindString(8, pusername);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(9, fid);
        }
 
        String padd1 = entity.getPadd1();
        if (padd1 != null) {
            stmt.bindString(10, padd1);
        }
 
        String padd2 = entity.getPadd2();
        if (padd2 != null) {
            stmt.bindString(11, padd2);
        }
 
        String pgender = entity.getPgender();
        if (pgender != null) {
            stmt.bindString(12, pgender);
        }
 
        String pzip = entity.getPzip();
        if (pzip != null) {
            stmt.bindString(13, pzip);
        }
 
        String pcountry = entity.getPcountry();
        if (pcountry != null) {
            stmt.bindString(14, pcountry);
        }
 
        String pstate = entity.getPstate();
        if (pstate != null) {
            stmt.bindString(15, pstate);
        }
 
        String pcity = entity.getPcity();
        if (pcity != null) {
            stmt.bindString(16, pcity);
        }
 
        String parea = entity.getParea();
        if (parea != null) {
            stmt.bindString(17, parea);
        }
 
        String pcountryid = entity.getPcountryid();
        if (pcountryid != null) {
            stmt.bindString(18, pcountryid);
        }
 
        String pstateid = entity.getPstateid();
        if (pstateid != null) {
            stmt.bindString(19, pstateid);
        }
 
        String pcityid = entity.getPcityid();
        if (pcityid != null) {
            stmt.bindString(20, pcityid);
        }
 
        String pareaid = entity.getPareaid();
        if (pareaid != null) {
            stmt.bindString(21, pareaid);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(22, uid);
        }
 
        String uid_type = entity.getUid_type();
        if (uid_type != null) {
            stmt.bindString(23, uid_type);
        }
 
        String pdob = entity.getPdob();
        if (pdob != null) {
            stmt.bindString(24, pdob);
        }
 
        String pphoto = entity.getPphoto();
        if (pphoto != null) {
            stmt.bindString(25, pphoto);
        }
 
        String page = entity.getPage();
        if (page != null) {
            stmt.bindString(26, page);
        }
 
        String prelation = entity.getPrelation();
        if (prelation != null) {
            stmt.bindString(27, prelation);
        }
 
        String reg_date = entity.getReg_date();
        if (reg_date != null) {
            stmt.bindString(28, reg_date);
        }
 
        java.util.Date lastvisit = entity.getLastvisit();
        if (lastvisit != null) {
            stmt.bindLong(29, lastvisit.getTime());
        }
 
        String p_detail = entity.getP_detail();
        if (p_detail != null) {
            stmt.bindString(30, p_detail);
        }
 
        String haircolor = entity.getHaircolor();
        if (haircolor != null) {
            stmt.bindString(31, haircolor);
        }
 
        String eyecolor = entity.getEyecolor();
        if (eyecolor != null) {
            stmt.bindString(32, eyecolor);
        }
 
        String visiblemark = entity.getVisiblemark();
        if (visiblemark != null) {
            stmt.bindString(33, visiblemark);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(34, height);
        }
 
        String display_id = entity.getDisplay_id();
        if (display_id != null) {
            stmt.bindString(35, display_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Patient readEntity(Cursor cursor, int offset) {
        Patient entity = new Patient( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pfn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pmn
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pln
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pmobnum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pemail
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pusername
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fid
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // padd1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // padd2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // pgender
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pzip
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // pcountry
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // pstate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // pcity
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // parea
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // pcountryid
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // pstateid
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // pcityid
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // pareaid
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // uid
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // uid_type
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // pdob
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // pphoto
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // page
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // prelation
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // reg_date
            cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)), // lastvisit
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // p_detail
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // haircolor
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // eyecolor
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // visiblemark
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // height
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34) // display_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Patient entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPfn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPmn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPln(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPmobnum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPemail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPusername(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPadd1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPadd2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPgender(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPzip(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPcountry(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPstate(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPcity(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setParea(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPcountryid(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPstateid(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPcityid(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPareaid(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setUid(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUid_type(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setPdob(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setPphoto(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPage(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPrelation(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setReg_date(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setLastvisit(cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)));
        entity.setP_detail(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setHaircolor(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setEyecolor(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setVisiblemark(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setHeight(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setDisplay_id(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Patient entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Patient entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
