package com.ezhealthtrack.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ezhealthtrack.greendao.MessageModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE_MODEL.
*/
public class MessageModelDao extends AbstractDao<MessageModel, Long> {

    public static final String TABLENAME = "MESSAGE_MODEL";

    /**
     * Properties of entity MessageModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nid = new Property(1, String.class, "nid", false, "NID");
        public final static Property Data = new Property(2, String.class, "data", false, "DATA");
        public final static Property Context = new Property(3, String.class, "context", false, "CONTEXT");
        public final static Property Context_type = new Property(4, String.class, "context_type", false, "CONTEXT_TYPE");
        public final static Property Date = new Property(5, java.util.Date.class, "date", false, "DATE");
        public final static Property From_id = new Property(6, String.class, "from_id", false, "FROM_ID");
        public final static Property From_fam_id = new Property(7, String.class, "from_fam_id", false, "FROM_FAM_ID");
        public final static Property From_type = new Property(8, String.class, "from_type", false, "FROM_TYPE");
        public final static Property Nt_id = new Property(9, String.class, "nt_id", false, "NT_ID");
        public final static Property To_id = new Property(10, String.class, "to_id", false, "TO_ID");
        public final static Property To_fam_id = new Property(11, String.class, "to_fam_id", false, "TO_FAM_ID");
        public final static Property To_type = new Property(12, String.class, "to_type", false, "TO_TYPE");
        public final static Property Notified = new Property(13, String.class, "notified", false, "NOTIFIED");
        public final static Property From_name = new Property(14, String.class, "from_name", false, "FROM_NAME");
        public final static Property To_name = new Property(15, String.class, "to_name", false, "TO_NAME");
        public final static Property Conv_count = new Property(16, Integer.class, "conv_count", false, "CONV_COUNT");
        public final static Property Message_type = new Property(17, String.class, "message_type", false, "MESSAGE_TYPE");
    };


    public MessageModelDao(DaoConfig config) {
        super(config);
    }
    
    public MessageModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE_MODEL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NID' TEXT," + // 1: nid
                "'DATA' TEXT," + // 2: data
                "'CONTEXT' TEXT," + // 3: context
                "'CONTEXT_TYPE' TEXT," + // 4: context_type
                "'DATE' INTEGER," + // 5: date
                "'FROM_ID' TEXT," + // 6: from_id
                "'FROM_FAM_ID' TEXT," + // 7: from_fam_id
                "'FROM_TYPE' TEXT," + // 8: from_type
                "'NT_ID' TEXT," + // 9: nt_id
                "'TO_ID' TEXT," + // 10: to_id
                "'TO_FAM_ID' TEXT," + // 11: to_fam_id
                "'TO_TYPE' TEXT," + // 12: to_type
                "'NOTIFIED' TEXT," + // 13: notified
                "'FROM_NAME' TEXT," + // 14: from_name
                "'TO_NAME' TEXT," + // 15: to_name
                "'CONV_COUNT' INTEGER," + // 16: conv_count
                "'MESSAGE_TYPE' TEXT);"); // 17: message_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MessageModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nid = entity.getNid();
        if (nid != null) {
            stmt.bindString(2, nid);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(3, data);
        }
 
        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(4, context);
        }
 
        String context_type = entity.getContext_type();
        if (context_type != null) {
            stmt.bindString(5, context_type);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }
 
        String from_id = entity.getFrom_id();
        if (from_id != null) {
            stmt.bindString(7, from_id);
        }
 
        String from_fam_id = entity.getFrom_fam_id();
        if (from_fam_id != null) {
            stmt.bindString(8, from_fam_id);
        }
 
        String from_type = entity.getFrom_type();
        if (from_type != null) {
            stmt.bindString(9, from_type);
        }
 
        String nt_id = entity.getNt_id();
        if (nt_id != null) {
            stmt.bindString(10, nt_id);
        }
 
        String to_id = entity.getTo_id();
        if (to_id != null) {
            stmt.bindString(11, to_id);
        }
 
        String to_fam_id = entity.getTo_fam_id();
        if (to_fam_id != null) {
            stmt.bindString(12, to_fam_id);
        }
 
        String to_type = entity.getTo_type();
        if (to_type != null) {
            stmt.bindString(13, to_type);
        }
 
        String notified = entity.getNotified();
        if (notified != null) {
            stmt.bindString(14, notified);
        }
 
        String from_name = entity.getFrom_name();
        if (from_name != null) {
            stmt.bindString(15, from_name);
        }
 
        String to_name = entity.getTo_name();
        if (to_name != null) {
            stmt.bindString(16, to_name);
        }
 
        Integer conv_count = entity.getConv_count();
        if (conv_count != null) {
            stmt.bindLong(17, conv_count);
        }
 
        String message_type = entity.getMessage_type();
        if (message_type != null) {
            stmt.bindString(18, message_type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MessageModel readEntity(Cursor cursor, int offset) {
        MessageModel entity = new MessageModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // data
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // context
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // context_type
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // from_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // from_fam_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // from_type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // nt_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // to_id
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // to_fam_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // to_type
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // notified
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // from_name
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // to_name
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // conv_count
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // message_type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MessageModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setData(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContext(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContext_type(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setFrom_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFrom_fam_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFrom_type(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNt_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTo_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTo_fam_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTo_type(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNotified(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFrom_name(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTo_name(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setConv_count(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setMessage_type(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MessageModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MessageModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
