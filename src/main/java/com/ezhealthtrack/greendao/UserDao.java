package com.ezhealthtrack.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ezhealthtrack.greendao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Role_id = new Property(3, String.class, "role_id", false, "ROLE_ID");
        public final static Property Speciality = new Property(4, String.class, "speciality", false, "SPECIALITY");
        public final static Property Photo = new Property(5, String.class, "photo", false, "PHOTO");
        public final static Property Lab_name = new Property(6, String.class, "lab_name", false, "LAB_NAME");
        public final static Property User_un_id = new Property(7, String.class, "user_un_id", false, "USER_UN_ID");
        public final static Property Tenant_type = new Property(8, String.class, "tenant_type", false, "TENANT_TYPE");
        public final static Property Tenant_id = new Property(9, String.class, "tenant_id", false, "TENANT_ID");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' TEXT," + // 1: user_id
                "'NAME' TEXT," + // 2: name
                "'ROLE_ID' TEXT," + // 3: role_id
                "'SPECIALITY' TEXT," + // 4: speciality
                "'PHOTO' TEXT," + // 5: photo
                "'LAB_NAME' TEXT," + // 6: lab_name
                "'USER_UN_ID' TEXT," + // 7: user_un_id
                "'TENANT_TYPE' TEXT," + // 8: tenant_type
                "'TENANT_ID' TEXT);"); // 9: tenant_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String role_id = entity.getRole_id();
        if (role_id != null) {
            stmt.bindString(4, role_id);
        }
 
        String speciality = entity.getSpeciality();
        if (speciality != null) {
            stmt.bindString(5, speciality);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(6, photo);
        }
 
        String lab_name = entity.getLab_name();
        if (lab_name != null) {
            stmt.bindString(7, lab_name);
        }
 
        String user_un_id = entity.getUser_un_id();
        if (user_un_id != null) {
            stmt.bindString(8, user_un_id);
        }
 
        String tenant_type = entity.getTenant_type();
        if (tenant_type != null) {
            stmt.bindString(9, tenant_type);
        }
 
        String tenant_id = entity.getTenant_id();
        if (tenant_id != null) {
            stmt.bindString(10, tenant_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // role_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // speciality
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // photo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lab_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_un_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tenant_type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // tenant_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRole_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSpeciality(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhoto(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLab_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_un_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTenant_type(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTenant_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
