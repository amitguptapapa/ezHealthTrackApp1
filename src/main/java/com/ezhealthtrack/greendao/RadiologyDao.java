package com.ezhealthtrack.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ezhealthtrack.greendao.Radiology;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RADIOLOGY.
*/
public class RadiologyDao extends AbstractDao<Radiology, Long> {

    public static final String TABLENAME = "RADIOLOGY";

    /**
     * Properties of entity Radiology.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Category_name = new Property(1, String.class, "category_name", false, "CATEGORY_NAME");
        public final static Property Category_id = new Property(2, String.class, "category_id", false, "CATEGORY_ID");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Test_name = new Property(4, String.class, "test_name", false, "TEST_NAME");
        public final static Property Codid = new Property(5, String.class, "codid", false, "CODID");
        public final static Property Codcat = new Property(6, String.class, "codcat", false, "CODCAT");
        public final static Property Gid = new Property(7, String.class, "gid", false, "GID");
    };


    public RadiologyDao(DaoConfig config) {
        super(config);
    }
    
    public RadiologyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RADIOLOGY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CATEGORY_NAME' TEXT," + // 1: category_name
                "'CATEGORY_ID' TEXT," + // 2: category_id
                "'TYPE' TEXT," + // 3: type
                "'TEST_NAME' TEXT," + // 4: test_name
                "'CODID' TEXT," + // 5: codid
                "'CODCAT' TEXT," + // 6: codcat
                "'GID' TEXT);"); // 7: gid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RADIOLOGY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Radiology entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String category_name = entity.getCategory_name();
        if (category_name != null) {
            stmt.bindString(2, category_name);
        }
 
        String category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindString(3, category_id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String test_name = entity.getTest_name();
        if (test_name != null) {
            stmt.bindString(5, test_name);
        }
 
        String codid = entity.getCodid();
        if (codid != null) {
            stmt.bindString(6, codid);
        }
 
        String codcat = entity.getCodcat();
        if (codcat != null) {
            stmt.bindString(7, codcat);
        }
 
        String gid = entity.getGid();
        if (gid != null) {
            stmt.bindString(8, gid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Radiology readEntity(Cursor cursor, int offset) {
        Radiology entity = new Radiology( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // category_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // category_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // test_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // codid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // codcat
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // gid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Radiology entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategory_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategory_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTest_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCodid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCodcat(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Radiology entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Radiology entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
