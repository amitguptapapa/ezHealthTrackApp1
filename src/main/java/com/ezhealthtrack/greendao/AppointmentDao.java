package com.ezhealthtrack.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table APPOINTMENT.
 */
public class AppointmentDao extends AbstractDao<Appointment, Long> {

	public static final String TABLENAME = "APPOINTMENT";

	/**
	 * Properties of entity Appointment.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property User_id = new Property(1, String.class,
				"user_id", false, "USER_ID");
		public final static Property Bkid = new Property(2, String.class,
				"bkid", false, "BKID");
		public final static Property Pid = new Property(3, String.class, "pid",
				false, "PID");
		public final static Property Slotid = new Property(4, String.class,
				"slotid", false, "SLOTID");
		public final static Property Flag = new Property(5, String.class,
				"flag", false, "FLAG");
		public final static Property Apflag = new Property(6, String.class,
				"apflag", false, "APFLAG");
		public final static Property Followid = new Property(7, String.class,
				"followid", false, "FOLLOWID");
		public final static Property Aptdate = new Property(8, String.class,
				"aptdate", false, "APTDATE");
		public final static Property Reason = new Property(9, String.class,
				"reason", false, "REASON");
		public final static Property Wid = new Property(10, String.class,
				"wid", false, "WID");
		public final static Property Wistep = new Property(11, String.class,
				"wistep", false, "WISTEP");
		public final static Property Wiid = new Property(12, String.class,
				"wiid", false, "WIID");
		public final static Property Visit = new Property(13, String.class,
				"visit", false, "VISIT");
		public final static Property Epid = new Property(14, String.class,
				"epid", false, "EPID");
		public final static Property Siid = new Property(15, String.class,
				"siid", false, "SIID");
		public final static Property Mpid = new Property(16, String.class,
				"mpid", false, "MPID");
		public final static Property Creationdate = new Property(17,
				java.util.Date.class, "creationdate", false, "CREATIONDATE");
		public final static Property Note = new Property(18, String.class,
				"note", false, "NOTE");
		public final static Property Type = new Property(19, String.class,
				"type", false, "TYPE");
		public final static Property PfId = new Property(20, String.class,
				"pfId", false, "PF_ID");

	};

	public AppointmentDao(DaoConfig config) {
		super(config);
	}

	public AppointmentDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'APPOINTMENT' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'USER_ID' TEXT," + // 1: user_id
				"'BKID' TEXT," + // 2: bkid
				"'PID' TEXT," + // 3: pid
				"'SLOTID' TEXT," + // 4: slotid
				"'FLAG' TEXT," + // 5: flag
				"'APFLAG' TEXT," + // 6: apflag
				"'FOLLOWID' TEXT," + // 7: followid
				"'APTDATE' TEXT," + // 8: aptdate
				"'REASON' TEXT," + // 9: reason
				"'WID' TEXT," + // 10: wid
				"'WISTEP' TEXT," + // 11: wistep
				"'WIID' TEXT," + // 12: wiid
				"'VISIT' TEXT," + // 13: visit
				"'EPID' TEXT," + // 14: epid
				"'SIID' TEXT," + // 15: siid
				"'MPID' TEXT," + // 16: mpid
				"'CREATIONDATE' INTEGER," + // 17: creationdate
				"'NOTE' TEXT," + // 18: note
				"'TYPE' TEXT," + // 19: type
				"'PF_ID' TEXT);"); // 20: pfId
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'APPOINTMENT'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Appointment entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String user_id = entity.getUser_id();
		if (user_id != null) {
			stmt.bindString(2, user_id);
		}

		String bkid = entity.getBkid();
		if (bkid != null) {
			stmt.bindString(3, bkid);
		}

		String pid = entity.getPid();
		if (pid != null) {
			stmt.bindString(4, pid);
		}

		String slotid = entity.getSlotid();
		if (slotid != null) {
			stmt.bindString(5, slotid);
		}

		String flag = entity.getFlag();
		if (flag != null) {
			stmt.bindString(6, flag);
		}

		String apflag = entity.getApflag();
		if (apflag != null) {
			stmt.bindString(7, apflag);
		}

		String followid = entity.getFollowid();
		if (followid != null) {
			stmt.bindString(8, followid);
		}

		String aptdate = entity.getAptdate();
		if (aptdate != null) {
			stmt.bindString(9, aptdate);
		}

		String reason = entity.getReason();
		if (reason != null) {
			stmt.bindString(10, reason);
		}

		String wid = entity.getWid();
		if (wid != null) {
			stmt.bindString(11, wid);
		}

		String wistep = entity.getWistep();
		if (wistep != null) {
			stmt.bindString(12, wistep);
		}

		String wiid = entity.getWiid();
		if (wiid != null) {
			stmt.bindString(13, wiid);
		}

		String visit = entity.getVisit();
		if (visit != null) {
			stmt.bindString(14, visit);
		}

		String epid = entity.getEpid();
		if (epid != null) {
			stmt.bindString(15, epid);
		}

		String siid = entity.getSiid();
		if (siid != null) {
			stmt.bindString(16, siid);
		}

		String mpid = entity.getMpid();
		if (mpid != null) {
			stmt.bindString(17, mpid);
		}

		java.util.Date creationdate = entity.getCreationdate();
		if (creationdate != null) {
			stmt.bindLong(18, creationdate.getTime());
		}

		String note = entity.getNote();
		if (note != null) {
			stmt.bindString(19, note);
		}

		String type = entity.getType();
		if (type != null) {
			stmt.bindString(20, type);
		}

		String pfId = entity.getPfId();
		if (pfId != null) {
			stmt.bindString(21, pfId);
		}

	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Appointment readEntity(Cursor cursor, int offset) {
		Appointment entity = new Appointment(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bkid
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pid
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // slotid
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // flag
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // apflag
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // followid
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // aptdate
				cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // reason
				cursor.isNull(offset + 10) ? null : cursor
						.getString(offset + 10), // wid
				cursor.isNull(offset + 11) ? null : cursor
						.getString(offset + 11), // wistep
				cursor.isNull(offset + 12) ? null : cursor
						.getString(offset + 12), // wiid
				cursor.isNull(offset + 13) ? null : cursor
						.getString(offset + 13), // visit
				cursor.isNull(offset + 14) ? null : cursor
						.getString(offset + 14), // epid
				cursor.isNull(offset + 15) ? null : cursor
						.getString(offset + 15), // siid
				cursor.isNull(offset + 16) ? null : cursor
						.getString(offset + 16), // mpid
				cursor.isNull(offset + 17) ? null : new java.util.Date(cursor
						.getLong(offset + 17)), // creationdate
				cursor.isNull(offset + 18) ? null : cursor
						.getString(offset + 18), // note
				cursor.isNull(offset + 19) ? null : cursor
						.getString(offset + 19), // type
				cursor.isNull(offset + 20) ? null : cursor
						.getString(offset + 20)// pfId
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Appointment entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setBkid(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setPid(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setSlotid(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setFlag(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setApflag(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setFollowid(cursor.isNull(offset + 7) ? null : cursor
				.getString(offset + 7));
		entity.setAptdate(cursor.isNull(offset + 8) ? null : cursor
				.getString(offset + 8));
		entity.setReason(cursor.isNull(offset + 9) ? null : cursor
				.getString(offset + 9));
		entity.setWid(cursor.isNull(offset + 10) ? null : cursor
				.getString(offset + 10));
		entity.setWistep(cursor.isNull(offset + 11) ? null : cursor
				.getString(offset + 11));
		entity.setWiid(cursor.isNull(offset + 12) ? null : cursor
				.getString(offset + 12));
		entity.setVisit(cursor.isNull(offset + 13) ? null : cursor
				.getString(offset + 13));
		entity.setEpid(cursor.isNull(offset + 14) ? null : cursor
				.getString(offset + 14));
		entity.setSiid(cursor.isNull(offset + 15) ? null : cursor
				.getString(offset + 15));
		entity.setMpid(cursor.isNull(offset + 16) ? null : cursor
				.getString(offset + 16));
		entity.setCreationdate(cursor.isNull(offset + 17) ? null
				: new java.util.Date(cursor.getLong(offset + 17)));
		entity.setNote(cursor.isNull(offset + 18) ? null : cursor
				.getString(offset + 18));
		entity.setType(cursor.isNull(offset + 19) ? null : cursor
				.getString(offset + 19));
		entity.setPfId(cursor.isNull(offset + 20) ? null : cursor
				.getString(offset + 20));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(Appointment entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Appointment entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
