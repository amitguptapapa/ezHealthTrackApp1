package com.ezhealthtrack.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.ezhealthtrack.greendao.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDER.
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER1";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Store_id = new Property(1, String.class, "store_id", false, "STORE_ID");
        public final static Property Invoice_no = new Property(2, String.class, "invoice_no", false, "INVOICE_NO");
        public final static Property Store_name = new Property(3, String.class, "store_name", false, "STORE_NAME");
        public final static Property Store_url = new Property(4, String.class, "store_url", false, "STORE_URL");
        public final static Property Firstname = new Property(5, String.class, "firstname", false, "FIRSTNAME");
        public final static Property Lastname = new Property(6, String.class, "lastname", false, "LASTNAME");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property Order_status_id = new Property(8, String.class, "order_status_id", false, "ORDER_STATUS_ID");
        public final static Property Bill_status_id = new Property(9, String.class, "bill_status_id", false, "BILL_STATUS_ID");
        public final static Property Ip = new Property(10, String.class, "ip", false, "IP");
        public final static Property User_agent = new Property(11, String.class, "user_agent", false, "USER_AGENT");
        public final static Property Date_added = new Property(12, java.util.Date.class, "date_added", false, "DATE_ADDED");
        public final static Property Date_modified = new Property(13, java.util.Date.class, "date_modified", false, "DATE_MODIFIED");
        public final static Property Total = new Property(14, String.class, "total", false, "TOTAL");
        public final static Property Customer_id = new Property(15, String.class, "customer_id", false, "CUSTOMER_ID");
        public final static Property Currency_id = new Property(16, String.class, "currency_id", false, "CURRENCY_ID");
        public final static Property Currency_code = new Property(17, String.class, "currency_code", false, "CURRENCY_CODE");
        public final static Property Order_display_id = new Property(18, String.class, "order_display_id", false, "ORDER_DISPLAY_ID");
        public final static Property Balance_amount = new Property(19, String.class, "balance_amount", false, "BALANCE_AMOUNT");
        public final static Property Paid_amount = new Property(20, String.class, "paid_amount", false, "PAID_AMOUNT");
        public final static Property Paid_on = new Property(21, String.class, "paid_on", false, "PAID_ON");
        public final static Property Comment = new Property(22, String.class, "comment", false, "COMMENT");
        public final static Property From_date = new Property(23, String.class, "from_date", false, "FROM_DATE");
        public final static Property To_date = new Property(24, String.class, "to_date", false, "TO_DATE");
        public final static Property Payment_method = new Property(25, String.class, "payment_method", false, "PAYMENT_METHOD");
        public final static Property Discount_percentage = new Property(26, String.class, "discount_percentage", false, "DISCOUNT_PERCENTAGE");
        public final static Property Discount_amount = new Property(27, String.class, "discount_amount", false, "DISCOUNT_AMOUNT");
        public final static Property Tax_percentage = new Property(28, String.class, "tax_percentage", false, "TAX_PERCENTAGE");
        public final static Property Tax_amount = new Property(29, String.class, "tax_amount", false, "TAX_AMOUNT");
        public final static Property Refund_amount = new Property(30, String.class, "refund_amount", false, "REFUND_AMOUNT");
        public final static Property Total_amount = new Property(31, String.class, "total_amount", false, "TOTAL_AMOUNT");
        public final static Property Generate_bill = new Property(32, String.class, "generate_bill", false, "GENERATE_BILL");
        public final static Property Approval_status = new Property(33, String.class, "approval_status", false, "APPROVAL_STATUS");
        public final static Property Approved_by = new Property(34, String.class, "approved_by", false, "APPROVED_BY");
        public final static Property Order_workflow_id = new Property(35, String.class, "order_workflow_id", false, "ORDER_WORKFLOW_ID");
        public final static Property Order_external_id = new Property(36, String.class, "order_external_id", false, "ORDER_EXTERNAL_ID");
        public final static Property Order_bill_id = new Property(37, String.class, "order_bill_id", false, "ORDER_BILL_ID");
        public final static Property Discount_type = new Property(38, String.class, "discount_type", false, "DISCOUNT_TYPE");
        public final static Property Fkey = new Property(39, String.class, "fkey", false, "FKEY");
        public final static Property Order_id = new Property(40, Long.class, "order_id", false, "ORDER_ID");
    };

    private DaoSession daoSession;


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDER1' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'STORE_ID' TEXT," + // 1: store_id
                "'INVOICE_NO' TEXT," + // 2: invoice_no
                "'STORE_NAME' TEXT," + // 3: store_name
                "'STORE_URL' TEXT," + // 4: store_url
                "'FIRSTNAME' TEXT," + // 5: firstname
                "'LASTNAME' TEXT," + // 6: lastname
                "'EMAIL' TEXT," + // 7: email
                "'ORDER_STATUS_ID' TEXT," + // 8: order_status_id
                "'BILL_STATUS_ID' TEXT," + // 9: bill_status_id
                "'IP' TEXT," + // 10: ip
                "'USER_AGENT' TEXT," + // 11: user_agent
                "'DATE_ADDED' INTEGER," + // 12: date_added
                "'DATE_MODIFIED' INTEGER," + // 13: date_modified
                "'TOTAL' TEXT," + // 14: total
                "'CUSTOMER_ID' TEXT," + // 15: customer_id
                "'CURRENCY_ID' TEXT," + // 16: currency_id
                "'CURRENCY_CODE' TEXT," + // 17: currency_code
                "'ORDER_DISPLAY_ID' TEXT," + // 18: order_display_id
                "'BALANCE_AMOUNT' TEXT," + // 19: balance_amount
                "'PAID_AMOUNT' TEXT," + // 20: paid_amount
                "'PAID_ON' TEXT," + // 21: paid_on
                "'COMMENT' TEXT," + // 22: comment
                "'FROM_DATE' TEXT," + // 23: from_date
                "'TO_DATE' TEXT," + // 24: to_date
                "'PAYMENT_METHOD' TEXT," + // 25: payment_method
                "'DISCOUNT_PERCENTAGE' TEXT," + // 26: discount_percentage
                "'DISCOUNT_AMOUNT' TEXT," + // 27: discount_amount
                "'TAX_PERCENTAGE' TEXT," + // 28: tax_percentage
                "'TAX_AMOUNT' TEXT," + // 29: tax_amount
                "'REFUND_AMOUNT' TEXT," + // 30: refund_amount
                "'TOTAL_AMOUNT' TEXT," + // 31: total_amount
                "'GENERATE_BILL' TEXT," + // 32: generate_bill
                "'APPROVAL_STATUS' TEXT," + // 33: approval_status
                "'APPROVED_BY' TEXT," + // 34: approved_by
                "'ORDER_WORKFLOW_ID' TEXT," + // 35: order_workflow_id
                "'ORDER_EXTERNAL_ID' TEXT," + // 36: order_external_id
                "'ORDER_BILL_ID' TEXT," + // 37: order_bill_id
                "'DISCOUNT_TYPE' TEXT," + // 38: discount_type
                "'FKEY' TEXT," + // 39: fkey
                "'ORDER_ID' INTEGER);"); // 40: order_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDER1'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String store_id = entity.getStore_id();
        if (store_id != null) {
            stmt.bindString(2, store_id);
        }
 
        String invoice_no = entity.getInvoice_no();
        if (invoice_no != null) {
            stmt.bindString(3, invoice_no);
        }
 
        String store_name = entity.getStore_name();
        if (store_name != null) {
            stmt.bindString(4, store_name);
        }
 
        String store_url = entity.getStore_url();
        if (store_url != null) {
            stmt.bindString(5, store_url);
        }
 
        String firstname = entity.getFirstname();
        if (firstname != null) {
            stmt.bindString(6, firstname);
        }
 
        String lastname = entity.getLastname();
        if (lastname != null) {
            stmt.bindString(7, lastname);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String order_status_id = entity.getOrder_status_id();
        if (order_status_id != null) {
            stmt.bindString(9, order_status_id);
        }
 
        String bill_status_id = entity.getBill_status_id();
        if (bill_status_id != null) {
            stmt.bindString(10, bill_status_id);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(11, ip);
        }
 
        String user_agent = entity.getUser_agent();
        if (user_agent != null) {
            stmt.bindString(12, user_agent);
        }
 
        java.util.Date date_added = entity.getDate_added();
        if (date_added != null) {
            stmt.bindLong(13, date_added.getTime());
        }
 
        java.util.Date date_modified = entity.getDate_modified();
        if (date_modified != null) {
            stmt.bindLong(14, date_modified.getTime());
        }
 
        String total = entity.getTotal();
        if (total != null) {
            stmt.bindString(15, total);
        }
 
        String customer_id = entity.getCustomer_id();
        if (customer_id != null) {
            stmt.bindString(16, customer_id);
        }
 
        String currency_id = entity.getCurrency_id();
        if (currency_id != null) {
            stmt.bindString(17, currency_id);
        }
 
        String currency_code = entity.getCurrency_code();
        if (currency_code != null) {
            stmt.bindString(18, currency_code);
        }
 
        String order_display_id = entity.getOrder_display_id();
        if (order_display_id != null) {
            stmt.bindString(19, order_display_id);
        }
 
        String balance_amount = entity.getBalance_amount();
        if (balance_amount != null) {
            stmt.bindString(20, balance_amount);
        }
 
        String paid_amount = entity.getPaid_amount();
        if (paid_amount != null) {
            stmt.bindString(21, paid_amount);
        }
 
        String paid_on = entity.getPaid_on();
        if (paid_on != null) {
            stmt.bindString(22, paid_on);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(23, comment);
        }
 
        String from_date = entity.getFrom_date();
        if (from_date != null) {
            stmt.bindString(24, from_date);
        }
 
        String to_date = entity.getTo_date();
        if (to_date != null) {
            stmt.bindString(25, to_date);
        }
 
        String payment_method = entity.getPayment_method();
        if (payment_method != null) {
            stmt.bindString(26, payment_method);
        }
 
        String discount_percentage = entity.getDiscount_percentage();
        if (discount_percentage != null) {
            stmt.bindString(27, discount_percentage);
        }
 
        String discount_amount = entity.getDiscount_amount();
        if (discount_amount != null) {
            stmt.bindString(28, discount_amount);
        }
 
        String tax_percentage = entity.getTax_percentage();
        if (tax_percentage != null) {
            stmt.bindString(29, tax_percentage);
        }
 
        String tax_amount = entity.getTax_amount();
        if (tax_amount != null) {
            stmt.bindString(30, tax_amount);
        }
 
        String refund_amount = entity.getRefund_amount();
        if (refund_amount != null) {
            stmt.bindString(31, refund_amount);
        }
 
        String total_amount = entity.getTotal_amount();
        if (total_amount != null) {
            stmt.bindString(32, total_amount);
        }
 
        String generate_bill = entity.getGenerate_bill();
        if (generate_bill != null) {
            stmt.bindString(33, generate_bill);
        }
 
        String approval_status = entity.getApproval_status();
        if (approval_status != null) {
            stmt.bindString(34, approval_status);
        }
 
        String approved_by = entity.getApproved_by();
        if (approved_by != null) {
            stmt.bindString(35, approved_by);
        }
 
        String order_workflow_id = entity.getOrder_workflow_id();
        if (order_workflow_id != null) {
            stmt.bindString(36, order_workflow_id);
        }
 
        String order_external_id = entity.getOrder_external_id();
        if (order_external_id != null) {
            stmt.bindString(37, order_external_id);
        }
 
        String order_bill_id = entity.getOrder_bill_id();
        if (order_bill_id != null) {
            stmt.bindString(38, order_bill_id);
        }
 
        String discount_type = entity.getDiscount_type();
        if (discount_type != null) {
            stmt.bindString(39, discount_type);
        }
 
        String fkey = entity.getFkey();
        if (fkey != null) {
            stmt.bindString(40, fkey);
        }
 
        Long order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindLong(41, order_id);
        }
    }

    @Override
    protected void attachEntity(Order entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // store_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // invoice_no
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // store_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // store_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // firstname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // order_status_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // bill_status_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ip
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // user_agent
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // date_added
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // date_modified
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // total
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // customer_id
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // currency_id
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // currency_code
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // order_display_id
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // balance_amount
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // paid_amount
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // paid_on
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // comment
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // from_date
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // to_date
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // payment_method
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // discount_percentage
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // discount_amount
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // tax_percentage
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // tax_amount
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // refund_amount
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // total_amount
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // generate_bill
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // approval_status
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // approved_by
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // order_workflow_id
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // order_external_id
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // order_bill_id
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // discount_type
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // fkey
            cursor.isNull(offset + 40) ? null : cursor.getLong(offset + 40) // order_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStore_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInvoice_no(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStore_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStore_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFirstname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLastname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrder_status_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBill_status_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIp(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUser_agent(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDate_added(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setDate_modified(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setTotal(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCustomer_id(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCurrency_id(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCurrency_code(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOrder_display_id(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBalance_amount(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPaid_amount(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPaid_on(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setComment(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setFrom_date(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setTo_date(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPayment_method(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDiscount_percentage(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setDiscount_amount(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setTax_percentage(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setTax_amount(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setRefund_amount(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setTotal_amount(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setGenerate_bill(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setApproval_status(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setApproved_by(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setOrder_workflow_id(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setOrder_external_id(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setOrder_bill_id(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setDiscount_type(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setFkey(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setOrder_id(cursor.isNull(offset + 40) ? null : cursor.getLong(offset + 40));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOrderDetailDao().getAllColumns());
            builder.append(" FROM ORDER1 T");
            builder.append(" LEFT JOIN ORDER_DETAIL T0 ON T.'ORDER_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
        Order entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        OrderDetail orderDetail = loadCurrentOther(daoSession.getOrderDetailDao(), cursor, offset);
        entity.setOrderDetail(orderDetail);

        return entity;    
    }

    public Order loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Order> list = new ArrayList<Order>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Order> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
